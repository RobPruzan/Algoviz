generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  bio           String?
  age           Int?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Algorithm     Algorithm[]
  Playground    Playground[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Algorithm {
  id          String   @id @default(cuid())
  // optional field algoID
  algoID      String?  @unique @default(cuid())
  code        String
  userId      String
  createdAt   DateTime @default(now())
  description String
  title       String
  type        String   @default("visualizer")
  language    String   @default("javascript")
  user        User     @relation(fields: [userId], references: [id])
}

model Playground {
  id         Int      @id @default(autoincrement()) @db.SmallInt
  createdAt  DateTime @default(now())
  userId     String
  name       String
  circles    Json
  lines      Json
  pencil     Json
  zoomAmount Float
  user       User     @relation(fields: [userId], references: [id])
}
