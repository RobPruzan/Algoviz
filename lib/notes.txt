Certainly! Below, I'm providing an example of how you can perform CRUD (Create, Read, Update, Delete) operations using IndexedDB in a TypeScript/React project. Note that IndexedDB is asynchronous, so the code involves promises.

1. Open Database
We'll start by opening or creating a database and defining the object store (table) we'll be working with.


function openDatabase() {
  return new Promise<IDBDatabase>((resolve, reject) => {
    const request = indexedDB.open("myDatabase", 1);
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);
    request.onupgradeneeded = (event) => {
      const db = (event.target as IDBOpenDBRequest).result;
      db.createObjectStore("items", { keyPath: "id" });
    };
  });
}
2. Create (Add a Record)
This function adds a new record to the store.


function createItem(item: { id: string; value: string }) {
  return openDatabase().then((db) => {
    const transaction = db.transaction("items", "readwrite");
    const store = transaction.objectStore("items");
    store.add(item);
  });
}
3. Read (Retrieve a Record)
This function reads a record by its ID.


function readItem(id: string) {
  return openDatabase().then((db) => {
    return new Promise<any>((resolve, reject) => {
      const transaction = db.transaction("items", "readonly");
      const store = transaction.objectStore("items");
      const request = store.get(id);
      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  });
}
4. Update (Modify a Record)
This function updates an existing record.


function updateItem(item: { id: string; value: string }) {
  return openDatabase().then((db) => {
    const transaction = db.transaction("items", "readwrite");
    const store = transaction.objectStore("items");
    store.put(item);
  });
}
5. Delete (Remove a Record)
This function deletes a record by its ID.


function deleteItem(id: string) {
  return openDatabase().then((db) => {
    const transaction = db.transaction("items", "readwrite");
    const store = transaction.objectStore("items");
    store.delete(id);
  });
}
These functions can be used within React components with the appropriate state management.

Remember to handle errors and edge cases in a production environment, including closing the database connection when it's no longer needed.